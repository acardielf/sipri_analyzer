name: CI

on:
#  push:
#    branches:
#      - main
  pull_request: ~
  schedule:
    - cron: "0 16 * * *" # todos los días a las 16:00 UTC (17:00 hora de Madrid)
  workflow_dispatch: ~ # manual trigger
  workflow_call:


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  get-last-update:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write    
    
    steps:

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}          
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}        

      - name: Download artifact from full-manual.yml
        uses: actions/github-script@v7
        with:
          script: |
            const workflowFileName = "full-manual.yml";
            const artifactName = "sipri-analyzer-files";

            async function downloadArtifact(workflowFileName) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFileName,
                status: "success",
                per_page: 1
              });

              if (runs.data.workflow_runs.length === 0) {
                core.warning(`⚠️ No se encontró ejecución previa para ${workflowFileName}`);
                return false;
              }

              const run_id = runs.data.workflow_runs[0].id;

              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id
              });

              const artifact = artifacts.data.artifacts.find(a => a.name === artifactName);
              if (!artifact) {
                core.warning(`⚠️ No se encontró el artefacto ${artifactName} en ${workflowFileName}`);
                return false;
              }

              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: "zip"
              });

              const fs = require("fs");
              fs.writeFileSync(`${artifactName}-${workflowFileName}.zip`, Buffer.from(download.data));
              return true;
            }

            await downloadArtifact("full-manual.yml");

      - name: Unzip full-manual artifact if exists
        run: |
          if [ -f sipri-analyzer-files-full-manual.yml.zip ]; then
            unzip -o sipri-analyzer-files-full-manual.yml.zip -d .
          fi

      - name: Download artifact from ci.yml
        uses: actions/github-script@v7
        with:
          script: |
            const workflowFileName = "ci.yml";
            const artifactName = "sipri-analyzer-files";
            const fs = require("fs");

            async function downloadArtifact(workflowFileName) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFileName,
                status: "success",
                per_page: 1
              });

              if (runs.data.workflow_runs.length === 0) {
                core.warning(`⚠️ No se encontró ejecución previa para ${workflowFileName}`);
                return false;
              }

              const run_id = runs.data.workflow_runs[0].id;

              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id
              });

              const artifact = artifacts.data.artifacts.find(a => a.name === artifactName);
              if (!artifact) {
                core.warning(`⚠️ No se encontró el artefacto ${artifactName} en ${workflowFileName}`);
                return false;
              }

              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: "zip"
              });

              fs.writeFileSync(`${artifactName}-${workflowFileName}.zip`, Buffer.from(download.data));
              return true;
            }

            await downloadArtifact("ci.yml");


      - name: Unzip ci artifact if exists (overwrites duplicates)
        run: |
          if [ -f sipri-analyzer-files-ci.yml.zip ]; then
            unzip -o sipri-analyzer-files-ci.yml.zip -d .
          fi

      - name: Install PHP 8.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, intl, pdo, pdo_sqlite, xml, curl, http, zip
          tools: composer:v2
          coverage: none

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: ./vendor/
          key: sipri_cache

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_APP_ENV: prod
          envkey_DATABASE_URL: "sqlite:///%kernel.project_dir%/var/data_%kernel.environment%.db"

      - name: Cache Vendor dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-vendor-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-vendor-

      - name: Install PHP dependencies
        run: composer install --no-interaction --no-progress

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tabula-py[jpype] pandas

      - name: Install Java (for tabula-py)
        run: sudo apt-get update && sudo apt-get install -y default-jre

      - name: Prepare Symfony dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          php bin/console cache:clear


      - name: Prepare Symfony DB
        run: |
          php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration

      - name: Check existing records
        run: |
          php bin/console doctrine:query:sql "SELECT max(cast(id as integer)) FROM convocatoria"
      
      - name: Run SIPRI Analyzer only last 
        run: php bin/console sipri:last --back 2 || true
     
      - name: Generate static website
        run: |
          php bin/console asset-map:compile
          php bin/console -e prod cache:clear
          php bin/console -e prod stenope:build --host=acardielf.github.io --base-url=/sipri_analyzer --scheme=https --no-sitemap ./docs
          rm public/assets/ -rf

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sipri-analyzer-files
          path: |
            pdfs/
            var/data_prod.db

      - name: Commit y push de docs
        uses: stefanzweifel/git-auto-commit-action@v6
        with: 
          file_pattern: 'docs/**'

